% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{ggsem}
\alias{ggsem}
\title{Create path model plot}
\usage{
ggsem(
  fit,
  filename,
  title = class(fit)[1],
  layout_df = NA,
  rename_nodes = F,
  cols = c("#E41A1C", "#377EB8", "grey80"),
  new_node_names = NA,
  layout = "auto",
  alpha = 0.05,
  exclude = "none"
)
}
\arguments{
\item{fit}{The lavaan::sem - created object}

\item{filename}{filename to write the figure to}

\item{title}{Character string with the plot title}

\item{layout_df}{optional data frame with the x and y coordinates for each variable in the plot}

\item{rename_nodes}{will you be supplying a look up table to rename the nodes}

\item{cols}{vector of colors for the arrows}

\item{new_node_names}{Named vector to rename the variables}

\item{layout}{select from a variety of layout algorithms. can be "auto",
"igraph", "manual", "dendrogram", "linear", "matrix", "treemap", "circlepack",
"partition", or "hive". see ?ggraph::create_layout() for more details.}

\item{alpha}{threshold for significance. Defaults to 0.05}

\item{exclude}{variables to exclude from the plot}
}
\description{
This function creates a plot from a structural equation model created by either
the lavaan::sem or piecewiseSEM::psem functions
}
\examples{


fake_data <- data.frame(x =stats::runif(100, -10, 10)) |>
   dplyr::mutate(noise1 = rnorm(100),
         y = 2*x + noise1,
          noise2= rnorm(100),
          z = x + y + noise2)

mod <- 'y ~ x
         z ~ x + y'

fit <- lavaan::sem(mod, data = fake_data)
ggsem(fit)

# example from `lavaan`
## The industrialization and Political Democracy Example
## Bollen (1989), page 332
library(lavaan)
model <- '
 # latent variable definitions
    ind60 =~ x1 + x2 + x3
    dem60 =~ y1 + a*y2 + b*y3 + c*y4
    dem65 =~ y5 + a*y6 + b*y7 + c*y8

 # regressions
   dem60 ~ ind60
   dem65 ~ ind60 + dem60

 # residual correlations
   y1 ~~ y5
  y2 ~~ y4 + y6
   y3 ~~ y7
   y4 ~~ y8
   y6 ~~ y8
'

fit <- lavaan::sem(model, data = PoliticalDemocracy)
summary(fit, fit.measures = TRUE)
ggsem(fit)

# example from piecewiseSEM
library(piecewiseSEM)
mod <- psem(
lm(rich ~ cover, data = keeley),
lm(cover ~ firesev, data = keeley),
lm(firesev ~ age, data = keeley),
data = keeley
)

summary(mod)
plot(mod)
ggsem(mod)
}
